@model TradeSatoshi.Common.Balance.BalanceViewModel
@{
	bool authenticated = User.Identity.IsAuthenticated;
}
<div id="wrapper">

	@* LeftSidebar Content*@
	<div id="leftSidebar-wrapper" class="col-xs-3 col-sm-2">
		@{Html.RenderPartial("_TradeSidebarPartial");}
	</div>

	@* Main Content*@
	<div id="main-wrapper" class="col-xs-9 col-sm-10 col-md-10 col-lg-8">
		<div id="main">


			<div style="padding: 2px; padding-top: 5px;">
				<div class="panel panel-default">
					<div class="panel-heading">
						<h3 class="panel-title">Balances</h3>
					</div>
					<div class="panel-body">
						<table id="table-balance" class="table">
							<thead>
								<tr>
									<th></th>
									<th>Coin</th>
									<th class="hidden-xs">Address</th>
									<th>Avaliable</th>
									<th>Total</th>
									<th class="hidden-sm hidden-xs">Unconfirmed</th>
									<th class="hidden-sm hidden-xs">Held for orders</th>
									<th class="hidden-sm hidden-xs">Pending withdraw</th>
								</tr>
							</thead>
							<tbody>
								@for (int i = 0; i < Model.Balances.Count; i++)
								{
									var balance = Model.Balances[i];
									<tr>
										<td>@GetBalanceMenu(balance)</td>
										<td title="@balance.Currency">@Helpers.CoinLogoWithSymbol(balance.Symbol)</td>
										<td class="hidden-xs">@GetBalanceAddress(balance)</td>
										<td>@balance.Avaliable</td>
										<td>@balance.Total</td>
										<td class="hidden-sm hidden-xs">@balance.Unconfirmed</td>
										<td class="hidden-sm hidden-xs">@balance.HeldForTrades</td>
										<td class="hidden-sm hidden-xs">@balance.PendingWithdraw</td>
									</tr>
								}

							</tbody>
						</table>
					</div>
				</div>
			</div>




			<div id="main-footer" class="main-footer">
				<span class="pull-right" style="padding-right: 5px; padding-top: 20px">© @DateTime.UtcNow.Year TradeSatoshi</span>
			</div>
		</div>
	</div>

	@* RightSidebar Content*@
	<div id="rightSidebar-wrapper" class="col-xs-2 hidden-xs hidden-sm hidden-md">
		@{Html.RenderPartial("_ChatSidebarPartial");}
	</div>
</div>


@helper GetBalanceMenu(TradeSatoshi.Common.Balance.BalanceModel balance)
{
	<div class="btn-group dropdown">
		<a class="btn btn-xs btn-info dropdown-toggle" href="#" data-toggle="dropdown"><i class="fa fa-bars" style="margin-right: 5px"></i><span class="caret"></span></a>
		<ul class="dropdown-menu">
			<li><b style="margin-left:20px;font-size:larger">@Helpers.CoinLogoWithSymbol(balance.Symbol) Menu</b></li>
			<li class="divider" style="padding-top:0px;margin-top:0px"></li>
			<li><a onclick="createTransfer('@balance.CurrencyId');">Transfer</a></li>
			<li><a onclick="createWithdraw('@balance.CurrencyId');">Withdraw</a></li>
			@if (string.IsNullOrEmpty(balance.Address))
			{
			<li><a class="address-generate" data-currency="@balance.CurrencyId">Create Address</a></li>
			}
			else
			{
			<li><a class="address-show" data-currency="@balance.Symbol" data-address="@balance.Address">Show Address</a></li>
			}
			<li class="divider"></li>
			@*	<li class="dropdown-header"></li>*@
			<li><a href="@Url.Action("Index", "History", new { coin = balance.Symbol, area = "Deposit" })">Deposits</a></li>
			<li><a href="@Url.Action("Index", "History", new { coin = balance.Symbol, area = "Withdraw" })">Withdrawals</a></li>
			<li><a href="@Url.Action("Index", "History", new { coin = balance.Symbol, area = "Transfer" })">Transfers</a></li>
		</ul>
	</div>
}

@helper GetBalanceAddress(TradeSatoshi.Common.Balance.BalanceModel balance)
{
	<div id="address-@balance.CurrencyId">
		@if (string.IsNullOrEmpty(balance.Address))
		{
		<button class="btn btn-xs btn-info address-generate" data-currency="@balance.CurrencyId">Create Address</button>
		}
		else
		{
		<span style="font-size:11px">@balance.Address</span>
		}
	</div>
}


@section Scripts {
	@Scripts.Render("~/Scripts/Project/chat.js")
	@Scripts.Render("~/Scripts/Project/Balance/balance.js")
	@Scripts.Render("~/Scripts/Project/tradeSidebar.js")
	<script>
		$('#table-balance').dataTable({
			"order": [[1, "asc"]],
			"lengthChange": false,
			"processing": true,
			"bServerSide": false,
			"searching": true,
			"scrollCollapse": false,
			"sort": true,
			"paging": false,
			"info": false,
			"language": { "emptyTable": "No data avaliable.", "search": "", searchPlaceholder: "Search balances" },
			"columnDefs": [
				{ "targets": 0, "searchable": false, "orderable": false, "sort": false },
				{ "targets": 3, "searchable": false, "orderable": false }
			],
			"fnDrawCallback": function (oSettings) {
				updateArrows();
			}
		});

		$(".address-generate").on("click", function () {
			var button = $(this);
			var currencyId = button.data("currency");
			var target = $("#address-" + currencyId);
			if (currencyId) {
				button.attr('disabled', 'disabled');
				postJson('@Url.Action("GetAddress")', { currencyId: currencyId }, function(data) {
					button.removeAttr('disabled');
					if (data.Success) {
						target.html(data.Message);
						return;
					}
					notifyModal('@Html.Resource("Generate Address Failed!")', data.Message);
				});
			}
		});

		$(".address-show").on("click", function () {
			var button = $(this);
			var currency = button.data("currency");
			var address = button.data("address");
			if (address) {
				notifyModal(currency + " Address", address);
			}
		});

		function createWithdraw(currencyId) {
			openModal('@Url.Action("Create", "Withdraw")', { currencyId: currencyId }, function(data) {
				// reload
			});
		}

		function createTransfer(currencyId) {
			openModal('@Url.Action("Create", "Transfer")', { currencyId: currencyId }, function(data) {
				// reload
			});
		}

		function updateArrows() {
			$('#table-balance > tbody > tr').each(function (index, row) {
				var orientation = index > 8 ? "dropup" : "dropdown";
				var button = $(this).find("td:first > .btn-group");
				button.removeClass("dropup dropdown").addClass(orientation)
			});
		}
	</script>
}